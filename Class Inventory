**************************************************************************************************************************************************************************

Create a Class Inventory with below attributes:

inventoryId - String
maximumQuantity - int
currentQuantity - int
threshold - int

Write getters, setters and parameterized constructor as required. 

Create class Solution with main method. 

Implement static method - replenish in Solution class.

This method will take an int parameter named limit along with the other parameter as array of Inventory objects. 
The method will return array of Inventory where the threshold attribute is less than or equal to the int parameter passed.

This method should be called from main method and display the id of returned objects along with Filling status.

if the threshold is greater than or equal to 75 then it should print "Critical Filling" as Filling Status. If the threshold is between 74 to 50 then Filling status should be "Moderate Filling", else should be "Non-Critical Filling" .

Before calling this method(replenish) in the main method, use Scanner object to read values for four Inventory objects referring the attributes in the above sequence. 
then, read the value for limit parameter. 
Next call the method replenish and display the result. 

Consider below sample input and output:

Input:
1
100
50
40
2
100
50
50
3
100
40
45
4
100
80
25
45

Output:
1 Non-Critical Filling
3 Non-Critical Filling
4 Non-Critical Filling



--------------------------------------------------
Sample code snippet for reference:
Please use below code to build your solution.
--------------------------------------------------

public class Solution
{

public static void main(String[] args)
{
//code to read values
//code to call required method
//code to display the results
}

public static Inventory[] replenish(int limit, Inventory[] inventory)
{
//method logic

}
}

class Inventory
{
//code to build Inventory class
}

-------------------------------------------------

Note on using Scanner object:
Sometimes scanner does not read the new line character while invoking methods like nextInt(), nextDouble() etc. 
Usually, this is not an issue, but this may be visible while calling nextLine() immediately after those methods.

Consider below input values:
22
hello

Referring below code:

Scanner sc = new Scanner(System.in);
int x = sc.nextInt();
String str = sc.nextLine(); -> here we expect str to have value hello. Instead it may be "".

If above issue is observed, then it is suggested to add one more explicit call to nextLine() after reading numeric value.
***********************************************************************************************************************************************************************

